//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Z:/Projects/DolDoc.NET/DolDoc.Centaur\centaur.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class centaurParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T_INTEGER=1, T_FLOAT=2, T_COMMA=3, T_STRING=4, T_IF=5, T_FOR=6, T_ELSE=7, 
		T_TRUE=8, T_FALSE=9, T_NULL=10, T_WHILE=11, T_PLUS=12, T_SEMICOLON=13, 
		T_SLASH=14, T_MOD=15, T_ASTERISK=16, T_MINUS=17, T_POPEN=18, T_PCLOSE=19, 
		T_BOPEN=20, T_BCLOSE=21, T_AOPEN=22, T_ACLOSE=23, T_ASSIGN=24, T_NEW=25, 
		T_STRUCT=26, T_DOT=27, T_DEC=28, T_INC=29, T_SYMBOL=30, WS=31, T_SHL=32, 
		T_SHR=33, T_LT=34, T_GT=35, T_LTE=36, T_GTE=37, T_EQUAL=38, T_NOTEQUAL=39, 
		T_BAND=40, T_BOR=41, T_AND=42, T_OR=43;
	public const int
		RULE_start = 0, RULE_postfix_expression = 1, RULE_mul_expression = 2, 
		RULE_add_expression = 3, RULE_shift_expression = 4, RULE_relational_expression = 5, 
		RULE_equality_expression = 6, RULE_bitwise_and_expression = 7, RULE_bitwise_or_expression = 8, 
		RULE_logical_and_expression = 9, RULE_logical_or_expression = 10, RULE_unary_expression = 11, 
		RULE_assignment_expression = 12, RULE_expression = 13, RULE_primary_expression = 14, 
		RULE_declaration = 15, RULE_compound_statement = 16, RULE_statement = 17, 
		RULE_statement_or_declaration = 18, RULE_statement_list = 19, RULE_struct_field = 20, 
		RULE_struct_definition = 21, RULE_function_definition = 22, RULE_expression_statement = 23, 
		RULE_definition = 24, RULE_definition_list = 25;
	public static readonly string[] ruleNames = {
		"start", "postfix_expression", "mul_expression", "add_expression", "shift_expression", 
		"relational_expression", "equality_expression", "bitwise_and_expression", 
		"bitwise_or_expression", "logical_and_expression", "logical_or_expression", 
		"unary_expression", "assignment_expression", "expression", "primary_expression", 
		"declaration", "compound_statement", "statement", "statement_or_declaration", 
		"statement_list", "struct_field", "struct_definition", "function_definition", 
		"expression_statement", "definition", "definition_list"
	};

	private static readonly string[] _LiteralNames = {
		null, null, null, "','", null, "'if'", "'for'", "'else'", "'true'", "'false'", 
		"'null'", "'while'", "'+'", "';'", "'/'", "'%'", "'*'", "'-'", "'('", 
		"')'", "'{'", "'}'", "'['", "']'", "'='", "'new'", "'struct'", "'.'", 
		"'--'", "'++'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "T_INTEGER", "T_FLOAT", "T_COMMA", "T_STRING", "T_IF", "T_FOR", 
		"T_ELSE", "T_TRUE", "T_FALSE", "T_NULL", "T_WHILE", "T_PLUS", "T_SEMICOLON", 
		"T_SLASH", "T_MOD", "T_ASTERISK", "T_MINUS", "T_POPEN", "T_PCLOSE", "T_BOPEN", 
		"T_BCLOSE", "T_AOPEN", "T_ACLOSE", "T_ASSIGN", "T_NEW", "T_STRUCT", "T_DOT", 
		"T_DEC", "T_INC", "T_SYMBOL", "WS", "T_SHL", "T_SHR", "T_LT", "T_GT", 
		"T_LTE", "T_GTE", "T_EQUAL", "T_NOTEQUAL", "T_BAND", "T_BOR", "T_AND", 
		"T_OR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "centaur.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static centaurParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public centaurParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public centaurParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class StartContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Definition_listContext definition_list() {
			return GetRuleContext<Definition_listContext>(0);
		}
		public StartContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_start; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitStart(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStart(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StartContext start() {
		StartContext _localctx = new StartContext(Context, State);
		EnterRule(_localctx, 0, RULE_start);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			definition_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_expressionContext : ParserRuleContext {
		public Postfix_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expression; } }
	 
		public Postfix_expressionContext() { }
		public virtual void CopyFrom(Postfix_expressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Ignore01Context : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_expressionContext primary_expression() {
			return GetRuleContext<Primary_expressionContext>(0);
		}
		public Ignore01Context(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterIgnore01(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitIgnore01(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIgnore01(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_POPEN() { return GetToken(centaurParser.T_POPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_PCLOSE() { return GetToken(centaurParser.T_PCLOSE, 0); }
		public CallContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCall(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DecrementContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DEC() { return GetToken(centaurParser.T_DEC, 0); }
		public DecrementContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitDecrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IndexContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_AOPEN() { return GetToken(centaurParser.T_AOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_ACLOSE() { return GetToken(centaurParser.T_ACLOSE, 0); }
		public IndexContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitIndex(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIndex(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class GetMemberContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_DOT() { return GetToken(centaurParser.T_DOT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SYMBOL() { return GetToken(centaurParser.T_SYMBOL, 0); }
		public GetMemberContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterGetMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitGetMember(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGetMember(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IncrementContext : Postfix_expressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_INC() { return GetToken(centaurParser.T_INC, 0); }
		public IncrementContext(Postfix_expressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitIncrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Postfix_expressionContext postfix_expression() {
		return postfix_expression(0);
	}

	private Postfix_expressionContext postfix_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Postfix_expressionContext _localctx = new Postfix_expressionContext(Context, _parentState);
		Postfix_expressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_postfix_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Ignore01Context(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 55;
			primary_expression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 74;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 72;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,0,Context) ) {
					case 1:
						{
						_localctx = new IndexContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 57;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 58;
						Match(T_AOPEN);
						State = 59;
						expression();
						State = 60;
						Match(T_ACLOSE);
						}
						break;
					case 2:
						{
						_localctx = new CallContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 62;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 63;
						Match(T_POPEN);
						State = 64;
						Match(T_PCLOSE);
						}
						break;
					case 3:
						{
						_localctx = new GetMemberContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 65;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 66;
						Match(T_DOT);
						State = 67;
						Match(T_SYMBOL);
						}
						break;
					case 4:
						{
						_localctx = new DecrementContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 68;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 69;
						Match(T_DEC);
						}
						break;
					case 5:
						{
						_localctx = new IncrementContext(new Postfix_expressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_postfix_expression);
						State = 70;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 71;
						Match(T_INC);
						}
						break;
					}
					} 
				}
				State = 76;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Mul_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Mul_expressionContext mul_expression() {
			return GetRuleContext<Mul_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_ASTERISK() { return GetToken(centaurParser.T_ASTERISK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SLASH() { return GetToken(centaurParser.T_SLASH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MOD() { return GetToken(centaurParser.T_MOD, 0); }
		public Mul_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_mul_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterMul_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitMul_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Mul_expressionContext mul_expression() {
		return mul_expression(0);
	}

	private Mul_expressionContext mul_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Mul_expressionContext _localctx = new Mul_expressionContext(Context, _parentState);
		Mul_expressionContext _prevctx = _localctx;
		int _startState = 4;
		EnterRecursionRule(_localctx, 4, RULE_mul_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 78;
			postfix_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 91;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 89;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
					case 1:
						{
						_localctx = new Mul_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mul_expression);
						State = 80;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 81;
						Match(T_ASTERISK);
						State = 82;
						postfix_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Mul_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mul_expression);
						State = 83;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 84;
						Match(T_SLASH);
						State = 85;
						postfix_expression(0);
						}
						break;
					case 3:
						{
						_localctx = new Mul_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_mul_expression);
						State = 86;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 87;
						Match(T_MOD);
						State = 88;
						postfix_expression(0);
						}
						break;
					}
					} 
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Add_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Mul_expressionContext mul_expression() {
			return GetRuleContext<Mul_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_PLUS() { return GetToken(centaurParser.T_PLUS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_MINUS() { return GetToken(centaurParser.T_MINUS, 0); }
		public Add_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_add_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterAdd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitAdd_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Add_expressionContext add_expression() {
		return add_expression(0);
	}

	private Add_expressionContext add_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Add_expressionContext _localctx = new Add_expressionContext(Context, _parentState);
		Add_expressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_add_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 95;
			mul_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 105;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 103;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
					case 1:
						{
						_localctx = new Add_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_add_expression);
						State = 97;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 98;
						Match(T_PLUS);
						State = 99;
						mul_expression(0);
						}
						break;
					case 2:
						{
						_localctx = new Add_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_add_expression);
						State = 100;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 101;
						Match(T_MINUS);
						State = 102;
						mul_expression(0);
						}
						break;
					}
					} 
				}
				State = 107;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,5,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Shift_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Add_expressionContext add_expression() {
			return GetRuleContext<Add_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SHL() { return GetToken(centaurParser.T_SHL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SHR() { return GetToken(centaurParser.T_SHR, 0); }
		public Shift_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shift_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitShift_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShift_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Shift_expressionContext shift_expression() {
		return shift_expression(0);
	}

	private Shift_expressionContext shift_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Shift_expressionContext _localctx = new Shift_expressionContext(Context, _parentState);
		Shift_expressionContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_shift_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 109;
			add_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 123;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 121;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
					case 1:
						{
						_localctx = new Shift_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
						State = 111;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 112;
						Match(T_SHL);
						State = 113;
						add_expression(0);
						 $$ = node(SHL, $1, $3); 
						}
						break;
					case 2:
						{
						_localctx = new Shift_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_shift_expression);
						State = 116;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 117;
						Match(T_SHR);
						State = 118;
						add_expression(0);
						 $$ = node(SHR, $1, $3); 
						}
						break;
					}
					} 
				}
				State = 125;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,7,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Relational_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Shift_expressionContext shift_expression() {
			return GetRuleContext<Shift_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LT() { return GetToken(centaurParser.T_LT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_GT() { return GetToken(centaurParser.T_GT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_LTE() { return GetToken(centaurParser.T_LTE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_GTE() { return GetToken(centaurParser.T_GTE, 0); }
		public Relational_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_relational_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitRelational_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelational_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Relational_expressionContext relational_expression() {
		return relational_expression(0);
	}

	private Relational_expressionContext relational_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Relational_expressionContext _localctx = new Relational_expressionContext(Context, _parentState);
		Relational_expressionContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_relational_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 127;
			shift_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 151;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 149;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
					case 1:
						{
						_localctx = new Relational_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 129;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 130;
						Match(T_LT);
						State = 131;
						shift_expression(0);
						 $$ = node(LESS_THAN, $1, $3); 
						}
						break;
					case 2:
						{
						_localctx = new Relational_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 134;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 135;
						Match(T_GT);
						State = 136;
						shift_expression(0);
						 $$ = node(GREATER_THAN, $1, $3); 
						}
						break;
					case 3:
						{
						_localctx = new Relational_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 139;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 140;
						Match(T_LTE);
						State = 141;
						shift_expression(0);
						 $$ = node(LESS_THAN_OR_EQUAL, $1, $3); 
						}
						break;
					case 4:
						{
						_localctx = new Relational_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_relational_expression);
						State = 144;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 145;
						Match(T_GTE);
						State = 146;
						shift_expression(0);
						 $$ = node(GREATER_THAN_OR_EQUAL, $1, $3); 
						}
						break;
					}
					} 
				}
				State = 153;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,9,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Equality_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Relational_expressionContext relational_expression() {
			return GetRuleContext<Relational_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_EQUAL() { return GetToken(centaurParser.T_EQUAL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_NOTEQUAL() { return GetToken(centaurParser.T_NOTEQUAL, 0); }
		public Equality_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_equality_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitEquality_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEquality_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Equality_expressionContext equality_expression() {
		return equality_expression(0);
	}

	private Equality_expressionContext equality_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Equality_expressionContext _localctx = new Equality_expressionContext(Context, _parentState);
		Equality_expressionContext _prevctx = _localctx;
		int _startState = 12;
		EnterRecursionRule(_localctx, 12, RULE_equality_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 155;
			relational_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 169;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 167;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,10,Context) ) {
					case 1:
						{
						_localctx = new Equality_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
						State = 157;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 158;
						Match(T_EQUAL);
						State = 159;
						relational_expression(0);
						 $$ = node(EQUALS, $1, $3); 
						}
						break;
					case 2:
						{
						_localctx = new Equality_expressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_equality_expression);
						State = 162;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 163;
						Match(T_NOTEQUAL);
						State = 164;
						relational_expression(0);
						 $$ = node(NOT_EQUALS, $1, $3); 
						}
						break;
					}
					} 
				}
				State = 171;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,11,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bitwise_and_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Equality_expressionContext equality_expression() {
			return GetRuleContext<Equality_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_and_expressionContext bitwise_and_expression() {
			return GetRuleContext<Bitwise_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_BAND() { return GetToken(centaurParser.T_BAND, 0); }
		public Bitwise_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterBitwise_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitBitwise_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_and_expressionContext bitwise_and_expression() {
		return bitwise_and_expression(0);
	}

	private Bitwise_and_expressionContext bitwise_and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bitwise_and_expressionContext _localctx = new Bitwise_and_expressionContext(Context, _parentState);
		Bitwise_and_expressionContext _prevctx = _localctx;
		int _startState = 14;
		EnterRecursionRule(_localctx, 14, RULE_bitwise_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 173;
			equality_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 182;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bitwise_and_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bitwise_and_expression);
					State = 175;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 176;
					Match(T_BAND);
					State = 177;
					equality_expression(0);
					 $$ = node(BAND, $1, $3); 
					}
					} 
				}
				State = 184;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,12,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Bitwise_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_and_expressionContext bitwise_and_expression() {
			return GetRuleContext<Bitwise_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_or_expressionContext bitwise_or_expression() {
			return GetRuleContext<Bitwise_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_BOR() { return GetToken(centaurParser.T_BOR, 0); }
		public Bitwise_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_bitwise_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterBitwise_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitBitwise_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBitwise_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Bitwise_or_expressionContext bitwise_or_expression() {
		return bitwise_or_expression(0);
	}

	private Bitwise_or_expressionContext bitwise_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Bitwise_or_expressionContext _localctx = new Bitwise_or_expressionContext(Context, _parentState);
		Bitwise_or_expressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_bitwise_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 186;
			bitwise_and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 195;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Bitwise_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_bitwise_or_expression);
					State = 188;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 189;
					Match(T_BOR);
					State = 190;
					bitwise_and_expression(0);
					 $$ = node(BOR, $1, $3); 
					}
					} 
				}
				State = 197;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,13,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_and_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Bitwise_or_expressionContext bitwise_or_expression() {
			return GetRuleContext<Bitwise_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_and_expressionContext logical_and_expression() {
			return GetRuleContext<Logical_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_AND() { return GetToken(centaurParser.T_AND, 0); }
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_and_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitLogical_and_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_and_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_and_expressionContext logical_and_expression() {
		return logical_and_expression(0);
	}

	private Logical_and_expressionContext logical_and_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(Context, _parentState);
		Logical_and_expressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_logical_and_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 199;
			bitwise_or_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 208;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_and_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_and_expression);
					State = 201;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 202;
					Match(T_AND);
					State = 203;
					bitwise_or_expression(0);
					 $$ = node(AND, $1, $3); 
					}
					} 
				}
				State = 210;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Logical_or_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_and_expressionContext logical_and_expression() {
			return GetRuleContext<Logical_and_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Logical_or_expressionContext logical_or_expression() {
			return GetRuleContext<Logical_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_OR() { return GetToken(centaurParser.T_OR, 0); }
		public Logical_or_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_logical_or_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitLogical_or_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogical_or_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Logical_or_expressionContext logical_or_expression() {
		return logical_or_expression(0);
	}

	private Logical_or_expressionContext logical_or_expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Logical_or_expressionContext _localctx = new Logical_or_expressionContext(Context, _parentState);
		Logical_or_expressionContext _prevctx = _localctx;
		int _startState = 20;
		EnterRecursionRule(_localctx, 20, RULE_logical_or_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 212;
			logical_and_expression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 221;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Logical_or_expressionContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_logical_or_expression);
					State = 214;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 215;
					Match(T_OR);
					State = 216;
					logical_and_expression(0);
					 $$ = node(OR, $1, $3); 
					}
					} 
				}
				State = 223;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,15,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Unary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_expressionContext postfix_expression() {
			return GetRuleContext<Postfix_expressionContext>(0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitUnary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unary_expressionContext unary_expression() {
		Unary_expressionContext _localctx = new Unary_expressionContext(Context, State);
		EnterRule(_localctx, 22, RULE_unary_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			postfix_expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Assignment_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Logical_or_expressionContext logical_or_expression() {
			return GetRuleContext<Logical_or_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Unary_expressionContext unary_expression() {
			return GetRuleContext<Unary_expressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_ASSIGN() { return GetToken(centaurParser.T_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public Assignment_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitAssignment_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Assignment_expressionContext assignment_expression() {
		Assignment_expressionContext _localctx = new Assignment_expressionContext(Context, State);
		EnterRule(_localctx, 24, RULE_assignment_expression);
		try {
			State = 232;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 226;
				logical_or_expression(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 227;
				unary_expression();
				State = 228;
				Match(T_ASSIGN);
				State = 229;
				assignment_expression();
				 $$ = node(ASSIGN, $1, $3); 
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Assignment_expressionContext assignment_expression() {
			return GetRuleContext<Assignment_expressionContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 26, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 234;
			assignment_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_expressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SYMBOL() { return GetToken(centaurParser.T_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_INTEGER() { return GetToken(centaurParser.T_INTEGER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_STRING() { return GetToken(centaurParser.T_STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_FLOAT() { return GetToken(centaurParser.T_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_NULL() { return GetToken(centaurParser.T_NULL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_TRUE() { return GetToken(centaurParser.T_TRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_FALSE() { return GetToken(centaurParser.T_FALSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_NEW() { return GetToken(centaurParser.T_NEW, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_POPEN() { return GetToken(centaurParser.T_POPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_PCLOSE() { return GetToken(centaurParser.T_PCLOSE, 0); }
		public Primary_expressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitPrimary_expression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrimary_expression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Primary_expressionContext primary_expression() {
		Primary_expressionContext _localctx = new Primary_expressionContext(Context, State);
		EnterRule(_localctx, 28, RULE_primary_expression);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_SYMBOL:
				EnterOuterAlt(_localctx, 1);
				{
				State = 236;
				Match(T_SYMBOL);
				}
				break;
			case T_INTEGER:
				EnterOuterAlt(_localctx, 2);
				{
				State = 237;
				Match(T_INTEGER);
				}
				break;
			case T_STRING:
				EnterOuterAlt(_localctx, 3);
				{
				State = 238;
				Match(T_STRING);
				}
				break;
			case T_FLOAT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 239;
				Match(T_FLOAT);
				}
				break;
			case T_NULL:
				EnterOuterAlt(_localctx, 5);
				{
				State = 240;
				Match(T_NULL);
				}
				break;
			case T_TRUE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 241;
				Match(T_TRUE);
				}
				break;
			case T_FALSE:
				EnterOuterAlt(_localctx, 7);
				{
				State = 242;
				Match(T_FALSE);
				}
				break;
			case T_NEW:
				EnterOuterAlt(_localctx, 8);
				{
				State = 243;
				Match(T_NEW);
				State = 244;
				Match(T_SYMBOL);
				State = 245;
				Match(T_POPEN);
				State = 246;
				Match(T_PCLOSE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_SYMBOL() { return GetTokens(centaurParser.T_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SYMBOL(int i) {
			return GetToken(centaurParser.T_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SEMICOLON() { return GetToken(centaurParser.T_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_ASSIGN() { return GetToken(centaurParser.T_ASSIGN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitDeclaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 30, RULE_declaration);
		try {
			State = 258;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 249;
				Match(T_SYMBOL);
				State = 250;
				Match(T_SYMBOL);
				State = 251;
				Match(T_SEMICOLON);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252;
				Match(T_SYMBOL);
				State = 253;
				Match(T_SYMBOL);
				State = 254;
				Match(T_ASSIGN);
				State = 255;
				expression();
				State = 256;
				Match(T_SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Compound_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_BOPEN() { return GetToken(centaurParser.T_BOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_BCLOSE() { return GetToken(centaurParser.T_BCLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Statement_listContext statement_list() {
			return GetRuleContext<Statement_listContext>(0);
		}
		public Compound_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compound_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitCompound_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompound_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Compound_statementContext compound_statement() {
		Compound_statementContext _localctx = new Compound_statementContext(Context, State);
		EnterRule(_localctx, 32, RULE_compound_statement);
		try {
			State = 266;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,19,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 260;
				Match(T_BOPEN);
				State = 261;
				Match(T_BCLOSE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 262;
				Match(T_BOPEN);
				State = 263;
				statement_list();
				State = 264;
				Match(T_BCLOSE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_statementContext expression_statement() {
			return GetRuleContext<Expression_statementContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_statement);
		try {
			State = 270;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_BOPEN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 268;
				compound_statement();
				}
				break;
			case T_INTEGER:
			case T_FLOAT:
			case T_STRING:
			case T_TRUE:
			case T_FALSE:
			case T_NULL:
			case T_SEMICOLON:
			case T_NEW:
			case T_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 269;
				expression_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_or_declarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public Statement_or_declarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_or_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterStatement_or_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitStatement_or_declaration(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_or_declaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_or_declarationContext statement_or_declaration() {
		Statement_or_declarationContext _localctx = new Statement_or_declarationContext(Context, State);
		EnterRule(_localctx, 36, RULE_statement_or_declaration);
		try {
			State = 274;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 272;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 273;
				statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Statement_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Statement_or_declarationContext[] statement_or_declaration() {
			return GetRuleContexts<Statement_or_declarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Statement_or_declarationContext statement_or_declaration(int i) {
			return GetRuleContext<Statement_or_declarationContext>(i);
		}
		public Statement_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitStatement_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Statement_listContext statement_list() {
		Statement_listContext _localctx = new Statement_listContext(Context, State);
		EnterRule(_localctx, 38, RULE_statement_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 276;
				statement_or_declaration();
				}
				}
				State = 279;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( ((_la) & ~0x3f) == 0 && ((1L << _la) & 1108354838L) != 0 );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_fieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_SYMBOL() { return GetTokens(centaurParser.T_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SYMBOL(int i) {
			return GetToken(centaurParser.T_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SEMICOLON() { return GetToken(centaurParser.T_SEMICOLON, 0); }
		public Struct_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_field; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterStruct_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitStruct_field(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_field(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_fieldContext struct_field() {
		Struct_fieldContext _localctx = new Struct_fieldContext(Context, State);
		EnterRule(_localctx, 40, RULE_struct_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 281;
			Match(T_SYMBOL);
			State = 282;
			Match(T_SYMBOL);
			State = 283;
			Match(T_SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_STRUCT() { return GetToken(centaurParser.T_STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SYMBOL() { return GetToken(centaurParser.T_SYMBOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_BOPEN() { return GetToken(centaurParser.T_BOPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_BCLOSE() { return GetToken(centaurParser.T_BCLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Struct_fieldContext[] struct_field() {
			return GetRuleContexts<Struct_fieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Struct_fieldContext struct_field(int i) {
			return GetRuleContext<Struct_fieldContext>(i);
		}
		public Struct_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitStruct_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStruct_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Struct_definitionContext struct_definition() {
		Struct_definitionContext _localctx = new Struct_definitionContext(Context, State);
		EnterRule(_localctx, 42, RULE_struct_definition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			Match(T_STRUCT);
			State = 286;
			Match(T_SYMBOL);
			State = 287;
			Match(T_BOPEN);
			State = 289;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 288;
				struct_field();
				}
				}
				State = 291;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T_SYMBOL );
			State = 293;
			Match(T_BCLOSE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_definitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] T_SYMBOL() { return GetTokens(centaurParser.T_SYMBOL); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SYMBOL(int i) {
			return GetToken(centaurParser.T_SYMBOL, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_POPEN() { return GetToken(centaurParser.T_POPEN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_PCLOSE() { return GetToken(centaurParser.T_PCLOSE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Compound_statementContext compound_statement() {
			return GetRuleContext<Compound_statementContext>(0);
		}
		public Function_definitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitFunction_definition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction_definition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Function_definitionContext function_definition() {
		Function_definitionContext _localctx = new Function_definitionContext(Context, State);
		EnterRule(_localctx, 44, RULE_function_definition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295;
			Match(T_SYMBOL);
			State = 296;
			Match(T_SYMBOL);
			State = 297;
			Match(T_POPEN);
			State = 298;
			Match(T_PCLOSE);
			State = 299;
			compound_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_statementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode T_SEMICOLON() { return GetToken(centaurParser.T_SEMICOLON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitExpression_statement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_statementContext expression_statement() {
		Expression_statementContext _localctx = new Expression_statementContext(Context, State);
		EnterRule(_localctx, 46, RULE_expression_statement);
		try {
			State = 305;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_SEMICOLON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 301;
				Match(T_SEMICOLON);
				}
				break;
			case T_INTEGER:
			case T_FLOAT:
			case T_STRING:
			case T_TRUE:
			case T_FALSE:
			case T_NULL:
			case T_NEW:
			case T_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 302;
				expression();
				State = 303;
				Match(T_SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_definitionContext struct_definition() {
			return GetRuleContext<Struct_definitionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_definitionContext function_definition() {
			return GetRuleContext<Function_definitionContext>(0);
		}
		public DefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitDefinition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DefinitionContext definition() {
		DefinitionContext _localctx = new DefinitionContext(Context, State);
		EnterRule(_localctx, 48, RULE_definition);
		try {
			State = 309;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T_STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 307;
				struct_definition();
				}
				break;
			case T_SYMBOL:
				EnterOuterAlt(_localctx, 2);
				{
				State = 308;
				function_definition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Definition_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext[] definition() {
			return GetRuleContexts<DefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DefinitionContext definition(int i) {
			return GetRuleContext<DefinitionContext>(i);
		}
		public Definition_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_definition_list; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.EnterDefinition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IcentaurListener typedListener = listener as IcentaurListener;
			if (typedListener != null) typedListener.ExitDefinition_list(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IcentaurVisitor<TResult> typedVisitor = visitor as IcentaurVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDefinition_list(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Definition_listContext definition_list() {
		Definition_listContext _localctx = new Definition_listContext(Context, State);
		EnterRule(_localctx, 50, RULE_definition_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 311;
				definition();
				}
				}
				State = 314;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==T_STRUCT || _la==T_SYMBOL );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 1: return postfix_expression_sempred((Postfix_expressionContext)_localctx, predIndex);
		case 2: return mul_expression_sempred((Mul_expressionContext)_localctx, predIndex);
		case 3: return add_expression_sempred((Add_expressionContext)_localctx, predIndex);
		case 4: return shift_expression_sempred((Shift_expressionContext)_localctx, predIndex);
		case 5: return relational_expression_sempred((Relational_expressionContext)_localctx, predIndex);
		case 6: return equality_expression_sempred((Equality_expressionContext)_localctx, predIndex);
		case 7: return bitwise_and_expression_sempred((Bitwise_and_expressionContext)_localctx, predIndex);
		case 8: return bitwise_or_expression_sempred((Bitwise_or_expressionContext)_localctx, predIndex);
		case 9: return logical_and_expression_sempred((Logical_and_expressionContext)_localctx, predIndex);
		case 10: return logical_or_expression_sempred((Logical_or_expressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool postfix_expression_sempred(Postfix_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 5);
		case 1: return Precpred(Context, 4);
		case 2: return Precpred(Context, 3);
		case 3: return Precpred(Context, 2);
		case 4: return Precpred(Context, 1);
		}
		return true;
	}
	private bool mul_expression_sempred(Mul_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 5: return Precpred(Context, 3);
		case 6: return Precpred(Context, 2);
		case 7: return Precpred(Context, 1);
		}
		return true;
	}
	private bool add_expression_sempred(Add_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 8: return Precpred(Context, 2);
		case 9: return Precpred(Context, 1);
		}
		return true;
	}
	private bool shift_expression_sempred(Shift_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 10: return Precpred(Context, 2);
		case 11: return Precpred(Context, 1);
		}
		return true;
	}
	private bool relational_expression_sempred(Relational_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 12: return Precpred(Context, 4);
		case 13: return Precpred(Context, 3);
		case 14: return Precpred(Context, 2);
		case 15: return Precpred(Context, 1);
		}
		return true;
	}
	private bool equality_expression_sempred(Equality_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 16: return Precpred(Context, 2);
		case 17: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwise_and_expression_sempred(Bitwise_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 18: return Precpred(Context, 1);
		}
		return true;
	}
	private bool bitwise_or_expression_sempred(Bitwise_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 19: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_and_expression_sempred(Logical_and_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 20: return Precpred(Context, 1);
		}
		return true;
	}
	private bool logical_or_expression_sempred(Logical_or_expressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 21: return Precpred(Context, 1);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,43,317,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
		1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,73,8,1,10,1,12,1,
		76,9,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,5,2,90,8,2,10,2,
		12,2,93,9,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,104,8,3,10,3,12,3,
		107,9,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,5,4,122,8,
		4,10,4,12,4,125,9,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,5,5,150,8,5,10,5,12,5,153,9,
		5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,168,8,6,10,6,
		12,6,171,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,181,8,7,10,7,12,7,184,
		9,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,5,8,194,8,8,10,8,12,8,197,9,8,1,9,
		1,9,1,9,1,9,1,9,1,9,1,9,1,9,5,9,207,8,9,10,9,12,9,210,9,9,1,10,1,10,1,
		10,1,10,1,10,1,10,1,10,1,10,5,10,220,8,10,10,10,12,10,223,9,10,1,11,1,
		11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,233,8,12,1,13,1,13,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,248,8,14,1,15,1,15,1,15,1,
		15,1,15,1,15,1,15,1,15,1,15,3,15,259,8,15,1,16,1,16,1,16,1,16,1,16,1,16,
		3,16,267,8,16,1,17,1,17,3,17,271,8,17,1,18,1,18,3,18,275,8,18,1,19,4,19,
		278,8,19,11,19,12,19,279,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,4,21,
		290,8,21,11,21,12,21,291,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,
		1,23,1,23,1,23,3,23,306,8,23,1,24,1,24,3,24,310,8,24,1,25,4,25,313,8,25,
		11,25,12,25,314,1,25,0,10,2,4,6,8,10,12,14,16,18,20,26,0,2,4,6,8,10,12,
		14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,0,0,329,0,52,
		1,0,0,0,2,54,1,0,0,0,4,77,1,0,0,0,6,94,1,0,0,0,8,108,1,0,0,0,10,126,1,
		0,0,0,12,154,1,0,0,0,14,172,1,0,0,0,16,185,1,0,0,0,18,198,1,0,0,0,20,211,
		1,0,0,0,22,224,1,0,0,0,24,232,1,0,0,0,26,234,1,0,0,0,28,247,1,0,0,0,30,
		258,1,0,0,0,32,266,1,0,0,0,34,270,1,0,0,0,36,274,1,0,0,0,38,277,1,0,0,
		0,40,281,1,0,0,0,42,285,1,0,0,0,44,295,1,0,0,0,46,305,1,0,0,0,48,309,1,
		0,0,0,50,312,1,0,0,0,52,53,3,50,25,0,53,1,1,0,0,0,54,55,6,1,-1,0,55,56,
		3,28,14,0,56,74,1,0,0,0,57,58,10,5,0,0,58,59,5,22,0,0,59,60,3,26,13,0,
		60,61,5,23,0,0,61,73,1,0,0,0,62,63,10,4,0,0,63,64,5,18,0,0,64,73,5,19,
		0,0,65,66,10,3,0,0,66,67,5,27,0,0,67,73,5,30,0,0,68,69,10,2,0,0,69,73,
		5,28,0,0,70,71,10,1,0,0,71,73,5,29,0,0,72,57,1,0,0,0,72,62,1,0,0,0,72,
		65,1,0,0,0,72,68,1,0,0,0,72,70,1,0,0,0,73,76,1,0,0,0,74,72,1,0,0,0,74,
		75,1,0,0,0,75,3,1,0,0,0,76,74,1,0,0,0,77,78,6,2,-1,0,78,79,3,2,1,0,79,
		91,1,0,0,0,80,81,10,3,0,0,81,82,5,16,0,0,82,90,3,2,1,0,83,84,10,2,0,0,
		84,85,5,14,0,0,85,90,3,2,1,0,86,87,10,1,0,0,87,88,5,15,0,0,88,90,3,2,1,
		0,89,80,1,0,0,0,89,83,1,0,0,0,89,86,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,
		0,91,92,1,0,0,0,92,5,1,0,0,0,93,91,1,0,0,0,94,95,6,3,-1,0,95,96,3,4,2,
		0,96,105,1,0,0,0,97,98,10,2,0,0,98,99,5,12,0,0,99,104,3,4,2,0,100,101,
		10,1,0,0,101,102,5,17,0,0,102,104,3,4,2,0,103,97,1,0,0,0,103,100,1,0,0,
		0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,7,1,0,0,0,107,105,
		1,0,0,0,108,109,6,4,-1,0,109,110,3,6,3,0,110,123,1,0,0,0,111,112,10,2,
		0,0,112,113,5,32,0,0,113,114,3,6,3,0,114,115,6,4,-1,0,115,122,1,0,0,0,
		116,117,10,1,0,0,117,118,5,33,0,0,118,119,3,6,3,0,119,120,6,4,-1,0,120,
		122,1,0,0,0,121,111,1,0,0,0,121,116,1,0,0,0,122,125,1,0,0,0,123,121,1,
		0,0,0,123,124,1,0,0,0,124,9,1,0,0,0,125,123,1,0,0,0,126,127,6,5,-1,0,127,
		128,3,8,4,0,128,151,1,0,0,0,129,130,10,4,0,0,130,131,5,34,0,0,131,132,
		3,8,4,0,132,133,6,5,-1,0,133,150,1,0,0,0,134,135,10,3,0,0,135,136,5,35,
		0,0,136,137,3,8,4,0,137,138,6,5,-1,0,138,150,1,0,0,0,139,140,10,2,0,0,
		140,141,5,36,0,0,141,142,3,8,4,0,142,143,6,5,-1,0,143,150,1,0,0,0,144,
		145,10,1,0,0,145,146,5,37,0,0,146,147,3,8,4,0,147,148,6,5,-1,0,148,150,
		1,0,0,0,149,129,1,0,0,0,149,134,1,0,0,0,149,139,1,0,0,0,149,144,1,0,0,
		0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,11,1,0,0,0,153,151,
		1,0,0,0,154,155,6,6,-1,0,155,156,3,10,5,0,156,169,1,0,0,0,157,158,10,2,
		0,0,158,159,5,38,0,0,159,160,3,10,5,0,160,161,6,6,-1,0,161,168,1,0,0,0,
		162,163,10,1,0,0,163,164,5,39,0,0,164,165,3,10,5,0,165,166,6,6,-1,0,166,
		168,1,0,0,0,167,157,1,0,0,0,167,162,1,0,0,0,168,171,1,0,0,0,169,167,1,
		0,0,0,169,170,1,0,0,0,170,13,1,0,0,0,171,169,1,0,0,0,172,173,6,7,-1,0,
		173,174,3,12,6,0,174,182,1,0,0,0,175,176,10,1,0,0,176,177,5,40,0,0,177,
		178,3,12,6,0,178,179,6,7,-1,0,179,181,1,0,0,0,180,175,1,0,0,0,181,184,
		1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,15,1,0,0,0,184,182,1,0,0,0,
		185,186,6,8,-1,0,186,187,3,14,7,0,187,195,1,0,0,0,188,189,10,1,0,0,189,
		190,5,41,0,0,190,191,3,14,7,0,191,192,6,8,-1,0,192,194,1,0,0,0,193,188,
		1,0,0,0,194,197,1,0,0,0,195,193,1,0,0,0,195,196,1,0,0,0,196,17,1,0,0,0,
		197,195,1,0,0,0,198,199,6,9,-1,0,199,200,3,16,8,0,200,208,1,0,0,0,201,
		202,10,1,0,0,202,203,5,42,0,0,203,204,3,16,8,0,204,205,6,9,-1,0,205,207,
		1,0,0,0,206,201,1,0,0,0,207,210,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,
		0,209,19,1,0,0,0,210,208,1,0,0,0,211,212,6,10,-1,0,212,213,3,18,9,0,213,
		221,1,0,0,0,214,215,10,1,0,0,215,216,5,43,0,0,216,217,3,18,9,0,217,218,
		6,10,-1,0,218,220,1,0,0,0,219,214,1,0,0,0,220,223,1,0,0,0,221,219,1,0,
		0,0,221,222,1,0,0,0,222,21,1,0,0,0,223,221,1,0,0,0,224,225,3,2,1,0,225,
		23,1,0,0,0,226,233,3,20,10,0,227,228,3,22,11,0,228,229,5,24,0,0,229,230,
		3,24,12,0,230,231,6,12,-1,0,231,233,1,0,0,0,232,226,1,0,0,0,232,227,1,
		0,0,0,233,25,1,0,0,0,234,235,3,24,12,0,235,27,1,0,0,0,236,248,5,30,0,0,
		237,248,5,1,0,0,238,248,5,4,0,0,239,248,5,2,0,0,240,248,5,10,0,0,241,248,
		5,8,0,0,242,248,5,9,0,0,243,244,5,25,0,0,244,245,5,30,0,0,245,246,5,18,
		0,0,246,248,5,19,0,0,247,236,1,0,0,0,247,237,1,0,0,0,247,238,1,0,0,0,247,
		239,1,0,0,0,247,240,1,0,0,0,247,241,1,0,0,0,247,242,1,0,0,0,247,243,1,
		0,0,0,248,29,1,0,0,0,249,250,5,30,0,0,250,251,5,30,0,0,251,259,5,13,0,
		0,252,253,5,30,0,0,253,254,5,30,0,0,254,255,5,24,0,0,255,256,3,26,13,0,
		256,257,5,13,0,0,257,259,1,0,0,0,258,249,1,0,0,0,258,252,1,0,0,0,259,31,
		1,0,0,0,260,261,5,20,0,0,261,267,5,21,0,0,262,263,5,20,0,0,263,264,3,38,
		19,0,264,265,5,21,0,0,265,267,1,0,0,0,266,260,1,0,0,0,266,262,1,0,0,0,
		267,33,1,0,0,0,268,271,3,32,16,0,269,271,3,46,23,0,270,268,1,0,0,0,270,
		269,1,0,0,0,271,35,1,0,0,0,272,275,3,30,15,0,273,275,3,34,17,0,274,272,
		1,0,0,0,274,273,1,0,0,0,275,37,1,0,0,0,276,278,3,36,18,0,277,276,1,0,0,
		0,278,279,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,39,1,0,0,0,281,282,
		5,30,0,0,282,283,5,30,0,0,283,284,5,13,0,0,284,41,1,0,0,0,285,286,5,26,
		0,0,286,287,5,30,0,0,287,289,5,20,0,0,288,290,3,40,20,0,289,288,1,0,0,
		0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,293,1,0,0,0,293,
		294,5,21,0,0,294,43,1,0,0,0,295,296,5,30,0,0,296,297,5,30,0,0,297,298,
		5,18,0,0,298,299,5,19,0,0,299,300,3,32,16,0,300,45,1,0,0,0,301,306,5,13,
		0,0,302,303,3,26,13,0,303,304,5,13,0,0,304,306,1,0,0,0,305,301,1,0,0,0,
		305,302,1,0,0,0,306,47,1,0,0,0,307,310,3,42,21,0,308,310,3,44,22,0,309,
		307,1,0,0,0,309,308,1,0,0,0,310,49,1,0,0,0,311,313,3,48,24,0,312,311,1,
		0,0,0,313,314,1,0,0,0,314,312,1,0,0,0,314,315,1,0,0,0,315,51,1,0,0,0,27,
		72,74,89,91,103,105,121,123,149,151,167,169,182,195,208,221,232,247,258,
		266,270,274,279,291,305,309,314
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
