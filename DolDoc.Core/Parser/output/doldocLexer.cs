//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5.1 C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g 2019-09-09 15:13:16

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  DolDoc.Core.Parser 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5.1")]
[System.CLSCompliant(false)]
public partial class doldocLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int Anything=4;
	public const int COMMA=5;
	public const int DOLLAR=6;
	public const int EQ=7;
	public const int Identifier=8;
	public const int MINUS=9;
	public const int Number=10;
	public const int PLUS=11;
	public const int QUOTE=12;
	public const int String=13;

	// delegates
	// delegators

	public doldocLexer()
	{
		OnCreated();
	}

	public doldocLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public doldocLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 1);
		TraceIn("COMMA", 1);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:9:7: ( ',' )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:9:9: ','
			{
			DebugLocation(9, 9);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 1);
			LeaveRule("COMMA", 1);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_DOLLAR();
	partial void LeaveRule_DOLLAR();

	// $ANTLR start "DOLLAR"
	[GrammarRule("DOLLAR")]
	private void mDOLLAR()
	{
		EnterRule_DOLLAR();
		EnterRule("DOLLAR", 2);
		TraceIn("DOLLAR", 2);
		try
		{
			int _type = DOLLAR;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:10:8: ( '$' )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:10:10: '$'
			{
			DebugLocation(10, 10);
			Match('$'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOLLAR", 2);
			LeaveRule("DOLLAR", 2);
			LeaveRule_DOLLAR();
		}
	}
	// $ANTLR end "DOLLAR"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 3);
		TraceIn("EQ", 3);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:11:4: ( '=' )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:11:6: '='
			{
			DebugLocation(11, 6);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 3);
			LeaveRule("EQ", 3);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 4);
		TraceIn("MINUS", 4);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:12:7: ( '-' )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:12:9: '-'
			{
			DebugLocation(12, 9);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 4);
			LeaveRule("MINUS", 4);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 5);
		TraceIn("PLUS", 5);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:13:6: ( '+' )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:13:8: '+'
			{
			DebugLocation(13, 8);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 5);
			LeaveRule("PLUS", 5);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_QUOTE();
	partial void LeaveRule_QUOTE();

	// $ANTLR start "QUOTE"
	[GrammarRule("QUOTE")]
	private void mQUOTE()
	{
		EnterRule_QUOTE();
		EnterRule("QUOTE", 6);
		TraceIn("QUOTE", 6);
		try
		{
			int _type = QUOTE;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:14:7: ( '\"' )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:14:9: '\"'
			{
			DebugLocation(14, 9);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("QUOTE", 6);
			LeaveRule("QUOTE", 6);
			LeaveRule_QUOTE();
		}
	}
	// $ANTLR end "QUOTE"

	partial void EnterRule_String();
	partial void LeaveRule_String();

	// $ANTLR start "String"
	[GrammarRule("String")]
	private void mString()
	{
		EnterRule_String();
		EnterRule("String", 7);
		TraceIn("String", 7);
		try
		{
			int _type = String;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:19:8: ( '\"' (~ ( '\"' ) )* '\"' )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:19:10: '\"' (~ ( '\"' ) )* '\"'
			{
			DebugLocation(19, 10);
			Match('\"'); 
			DebugLocation(19, 14);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:19:14: (~ ( '\"' ) )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='\u0000' && LA1_1<='!')||(LA1_1>='#' && LA1_1<='\uFFFF')))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:
					{
					DebugLocation(19, 14);
					input.Consume();


					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(19, 24);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("String", 7);
			LeaveRule("String", 7);
			LeaveRule_String();
		}
	}
	// $ANTLR end "String"

	partial void EnterRule_Identifier();
	partial void LeaveRule_Identifier();

	// $ANTLR start "Identifier"
	[GrammarRule("Identifier")]
	private void mIdentifier()
	{
		EnterRule_Identifier();
		EnterRule("Identifier", 8);
		TraceIn("Identifier", 8);
		try
		{
			int _type = Identifier;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:20:12: ( ( 'A' .. 'Z' )+ )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:20:14: ( 'A' .. 'Z' )+
			{
			DebugLocation(20, 14);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:20:14: ( 'A' .. 'Z' )+
			int cnt2=0;
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='A' && LA2_1<='Z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch (alt2)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:
					{
					DebugLocation(20, 14);
					input.Consume();


					}
					break;

				default:
					if (cnt2 >= 1)
						goto loop2;

					EarlyExitException eee2 = new EarlyExitException( 2, input );
					DebugRecognitionException(eee2);
					throw eee2;
				}
				cnt2++;
			}
			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Identifier", 8);
			LeaveRule("Identifier", 8);
			LeaveRule_Identifier();
		}
	}
	// $ANTLR end "Identifier"

	partial void EnterRule_Number();
	partial void LeaveRule_Number();

	// $ANTLR start "Number"
	[GrammarRule("Number")]
	private void mNumber()
	{
		EnterRule_Number();
		EnterRule("Number", 9);
		TraceIn("Number", 9);
		try
		{
			int _type = Number;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:21:8: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:21:10: ( '0' .. '9' )+
			{
			DebugLocation(21, 10);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:21:10: ( '0' .. '9' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if (((LA3_1>='0' && LA3_1<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:
					{
					DebugLocation(21, 10);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Number", 9);
			LeaveRule("Number", 9);
			LeaveRule_Number();
		}
	}
	// $ANTLR end "Number"

	partial void EnterRule_Anything();
	partial void LeaveRule_Anything();

	// $ANTLR start "Anything"
	[GrammarRule("Anything")]
	private void mAnything()
	{
		EnterRule_Anything();
		EnterRule("Anything", 10);
		TraceIn("Anything", 10);
		try
		{
			int _type = Anything;
			int _channel = DefaultTokenChannel;
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:22:9: ( . )
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:22:11: .
			{
			DebugLocation(22, 11);
			MatchAny(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("Anything", 10);
			LeaveRule("Anything", 10);
			LeaveRule_Anything();
		}
	}
	// $ANTLR end "Anything"

	public override void mTokens()
	{
		// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:8: ( COMMA | DOLLAR | EQ | MINUS | PLUS | QUOTE | String | Identifier | Number | Anything )
		int alt4=10;
		try { DebugEnterDecision(4, false);
		int LA4_1 = input.LA(1);

		if ((LA4_1==','))
		{
			alt4 = 1;
		}
		else if ((LA4_1=='$'))
		{
			alt4 = 2;
		}
		else if ((LA4_1=='='))
		{
			alt4 = 3;
		}
		else if ((LA4_1=='-'))
		{
			alt4 = 4;
		}
		else if ((LA4_1=='+'))
		{
			alt4 = 5;
		}
		else if ((LA4_1=='\"'))
		{
			int LA4_2 = input.LA(2);

			if (((LA4_2>='\u0000' && LA4_2<='\uFFFF')))
			{
				alt4 = 7;
			}
			else
			{
				alt4 = 6;
			}
		}
		else if (((LA4_1>='A' && LA4_1<='Z')))
		{
			alt4 = 8;
		}
		else if (((LA4_1>='0' && LA4_1<='9')))
		{
			alt4 = 9;
		}
		else if (((LA4_1>='\u0000' && LA4_1<='!')||LA4_1=='#'||(LA4_1>='%' && LA4_1<='*')||(LA4_1>='.' && LA4_1<='/')||(LA4_1>=':' && LA4_1<='<')||(LA4_1>='>' && LA4_1<='@')||(LA4_1>='[' && LA4_1<='\uFFFF')))
		{
			alt4 = 10;
		}
		else
		{
			NoViableAltException nvae = new NoViableAltException("", 4, 0, input, 1);
			DebugRecognitionException(nvae);
			throw nvae;
		}
		} finally { DebugExitDecision(4); }
		switch (alt4)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:10: COMMA
			{
			DebugLocation(1, 10);
			mCOMMA(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:16: DOLLAR
			{
			DebugLocation(1, 16);
			mDOLLAR(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:23: EQ
			{
			DebugLocation(1, 23);
			mEQ(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:26: MINUS
			{
			DebugLocation(1, 26);
			mMINUS(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:32: PLUS
			{
			DebugLocation(1, 32);
			mPLUS(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:37: QUOTE
			{
			DebugLocation(1, 37);
			mQUOTE(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:43: String
			{
			DebugLocation(1, 43);
			mString(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:50: Identifier
			{
			DebugLocation(1, 50);
			mIdentifier(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:61: Number
			{
			DebugLocation(1, 61);
			mNumber(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Projects\\_pr\\DolDoc.NET\\DolDoc.Core\\Parser\\doldoc.g:1:68: Anything
			{
			DebugLocation(1, 68);
			mAnything(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

	#endregion

}

} // namespace  DolDoc.Core.Parser 
